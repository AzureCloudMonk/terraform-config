#!/usr/bin/env ruby
# This executable is run via null resource provisioner
# but you can run it directly, too

require 'base64'
require 'json'
require 'pathname'
require 'uri'
require 'yaml'

class TravisWorkerConfigVerifier
  def initialize(argv: ARGV)
    @cloud_config_string_base64 = argv.fetch(0)
    @prog = File.basename($PROGRAM_NAME)
  end

  attr_reader :cloud_config_string_base64, :prog

  def verify!
    cloud_config.fetch('write_files').each do |file_def|
      content = file_def.fetch('content')
      content = Base64.decode64(content) if file_def['encoding'] == 'b64'
      verifier = "verify#{file_def.fetch('path').gsub(/[^_a-zA-Z0-9]/, '_')}!"
      if respond_to?(verifier, true)
        puts "#{prog}: Verifying cloud-config #{file_def.fetch('path')}"
        send(verifier, content)
      end
    end
  end

  private

  def cloud_config
    @cloud_config ||= YAML.safe_load(Base64.decode64(cloud_config_string_base64))
  end

  def verify_etc_default_travis_worker!(content)
    vars = load_env_file(content)
    assert! vars.key?('TRAVIS_WORKER_BUILD_API_URI')

    build_api_uri = URI(vars['TRAVIS_WORKER_BUILD_API_URI'])

    token = build_api_uri.user
    build_api_uri.user = nil
    build_api_uri.path = '/uptime'

    assert!(
      system(
        "curl -s -f -H 'Authorization: token #{token}' #{build_api_uri}",
        %i[out err] => '/dev/null'
      ),
      msg: 'travis-build credentials do not work'
    )

    assert! vars.key?('TRAVIS_WORKER_JOB_BOARD_URL')

    job_board_url = URI(vars['TRAVIS_WORKER_JOB_BOARD_URL'])
    assert!(
      system(
        "curl -s -f #{job_board_url}",
        %i[out err] => '/dev/null'
      ),
      msg: 'job-board credentials do not work'
    )
  end

  def verify_var_tmp_travis_run_d_check_unregister_netdevice!(content)
    assert_identical_content!(
      content, 'assets/travis-worker/check-unregister-netdevice.bash'
    )
  end

  def verify_etc_cron_d_unregister_netdevice!(content)
    assert_identical_content!(
      content, 'assets/travis-worker/unregister-netdevice.crontab'
    )
  end

  def verify_var_tmp_travis_run_d_check_docker_health!(content)
    assert_identical_content!(
      content, 'assets/travis-worker/check-docker-health.bash'
    )
  end

  def verify_etc_cron_d_check_docker_health!(content)
    assert_identical_content!(
      content, 'assets/travis-worker/check-docker-health.crontab'
    )
  end

  def verify_etc_default_github_users!(content)
    vars = load_env_file(content)
    assert!(vars.key?('GITHUB_USERS'), msg: 'does not define GITHUB_USERS')
    vars.fetch('GITHUB_USERS').split.each do |github_user|
      assert!(
        github_user.split(':').length == 2,
        msg: "user #{github_user.inspect} incorrectly defined"
      )
    end
  end

  def verify_etc_docker_daemon_direct_lvm_json!(content)
    config = JSON.parse(content)
    assert!(config.key?('storage-opts'), msg: 'missing storage-opts config')
    storage_opts = Hash[config.fetch('storage-opts').map { |s| s.split('=') }]
    assert!(
      storage_opts.key?('dm.basesize'),
      msg: 'storage opts missing dm.basesize'
    )
    dm_basesize = storage_opts.fetch('dm.basesize')
    assert!(dm_basesize.end_with?('G'), msg: 'dm.basesize is not in GB')

    dm_basesize_gigs = Integer(dm_basesize.delete('G'))
    assert!(dm_basesize_gigs > 5, msg: 'dm.basesize under 5GB')
  end

  def verify_var_tmp_travis_run_d_cyclist_url!(content)
    assert!(content.strip !~ /\/$/, msg: 'value contains a trailing slash')
    assert!(content =~ /^https/, msg: 'value protocol is not https')
    assert!(
      content =~ /\bcyclist\b/,
      msg: 'value does not appear to be a cyclist URL'
    )
  end

  def verify_var_tmp_travis_run_d_travis_worker_prestart_hook!(content)
    assert_identical_content!(
      content,
      'modules/aws_asg/prestart-hook.bash'
    )
  end

  def verify_var_tmp_travis_run_d_travis_worker_start_hook!(content)
    assert_identical_content!(
      content,
      'modules/aws_asg/start-hook.bash'
    )
  end

  def verify_var_tmp_travis_run_d_travis_worker_stop_hook!(content)
    assert_identical_content!(
      content,
      'modules/aws_asg/stop-hook.bash'
    )
  end

  class ValueError < StandardError
  end

  def assert!(condition, msg: '')
    raise Exception, msg unless condition
  end

  def assert_identical_content!(content, path)
    assert!(
      content == load_relative_file(path),
      msg: "content does not match #{path.inspect}"
    )
  end

  def load_env_file(content)
    vars = {}
    content.split("\n").each do |line|
      next if line.strip.start_with?('#')
      key, value = line.sub(/^export /, '').split('=', 2)
      next if key.nil? || value.nil?
      vars[key.strip] = value.strip.gsub(/["']/, '')
    end
    vars
  end

  def load_relative_file(path)
    File.read(top.join(path))
  end

  def top
    @top ||= Pathname.new(`git rev-parse --show-toplevel`.strip)
  end
end

def main
  TravisWorkerConfigVerifier.new.verify!
end

main if $PROGRAM_NAME == __FILE__
