#!/usr/bin/env ruby
require 'json'
require 'net/http'
require 'openssl'

DEFAULT_STACKS = %w(
  android
  erlang
  go
  haskell
  jvm
  nodejs
  perl
  php
  python
  ruby
  amethyst
  connie
  garnet
).freeze

def main
  stacks = ENV['STACKS'].to_s.split.map(&:strip)
  stacks = DEFAULT_STACKS if stacks.empty?
  stacks.each do |stack|
    tag = latest_docker_image_tag("travisci/ci-#{stack}")
    $stdout.puts(%(latest_docker_image_#{stack} = #{tag.to_s.inspect}))
  end
  worker_tag = latest_docker_image_tag('travisci/worker')
  $stdout.puts(%(latest_docker_image_worker = #{worker_tag.to_s.inspect}))

  0
end

def latest_docker_image_tag(image)
  qs = URI.encode_www_form(
    service: 'registry.docker.io',
    scope: "repository:#{image}:pull"
  )

  token = docker_index_get(
    "/token?#{qs}",
    host: 'auth.docker.io'
  ).fetch('token')

  tags = docker_index_get(
    "/v2/#{image}/tags/list",
    headers: { 'Authorization' => "Bearer #{token}" }
  ).fetch('tags')

  "#{image}:#{fancy_sorted(tags).reverse.fetch(0)}"
end

def fancy_sorted(tags)
  tags.sort do |a, b|
    if a =~ /^packer/ && b =~ /^packer/
      Integer(a.split('-').last) <=> Integer(b.split('-').last)
    elsif a =~ /^v\d/ && b =~ /^v\d/
      vers2int(a) <=> vers2int(b)
    else
      a <=> b
    end
  end
end

def vers2int(vers)
  parts = vers.sub(/^v/, '').split('-')
  parts = parts.map { |part| part.split('.') }.flatten.compact
  parts.reject! { |part| part.start_with?('g') || part.start_with?('dirty') }
  parts << 0 if parts.length < 4
  parts.map { |part| sprintf('%03d' % Integer(part)) }.join.to_i
end

def docker_index_get(path, host: 'index.docker.io', headers: {})
  http = Net::HTTP.new(host, 443)
  http.use_ssl = true
  http.verify_mode = OpenSSL::SSL::VERIFY_PEER

  request = Net::HTTP::Get.new(path)
  request['Accept'] = 'application/json'
  headers.each do |key, value|
    request[key] = value
  end
  response = http.request(request)
  JSON.parse(response.body)
end

exit(main) if $PROGRAM_NAME == __FILE__
